#!/sbin/runscript
# Copyright (c) 2007-2010 Funtoo Technologies
# All rights reserved. Released under the 2-clause BSD license.

# TODO - generate cached config for /etc/init.d/foo, use them for starting and stopping
# rather than running "live" commands. This way "stop" will work correctly at all times.

# next line: INT = deprecated, support it for backwards compat:
INT=${RC_SVCNAME#netif.}
interface=${interface:-$INT}

[ "$interface" = "tmpl" ] && exit 0

if [ -z "$template" ]; then
	eerror "Please specify a template (template=) for $RC_SVCNAME"
	exit 1
fi

CYAN="[36;01m"
OFF="[0m"
	
DESC2="${template}"
[ -n "$description" ] && DESC2="${description}"

STARTD="Network $DESC2 $CYAN$interface$OFF up"
STOPD="Network $DESC2 $CYAN$interface$OFF down"

require() {
	local missing=""
	for envname in $*; do 
		[ -z "${!envname}" ] && missing="$missing $envname"
	done
	if [ -n "$missing" ]; then
		echo
		eerror "ERROR: Required configuration variable(s) are missing:"
		eerror ""
		for miss in $missing; do
			eerror "    ${CYAN}$miss${OFF}"
		done
		eerror ""
		eerror "Please correct your configuration to address this issue."
		echo
		exit 1
	fi
}

die() { eend 1 "$*"; exit 1; }
netif_depend() { return; }
netif_create() { return; }
netif_pre_up() { return; }
netif_post_up() { return; }
netif_pre_down() { return; }
netif_post_down() { return; }
netif_destroy() { return; }

try() {
	$* 
	if [ $? -ne 0 ]; then
		echo "Command failure: $*"
		exit 1
	fi
}

debug() {
	$* 
	if [ $? -ne 0 ]; then
		echo "Command failure: $*"
	fi
}

depend() {
	need localmount
	[ "$vlanmode" != "off" ] && need "netif.${trunk}"
	[ -n "$slaves" ] && need $slaves
	netif_depend
}

start() {
	ebegin "$STARTD"
	netif_create
	if [ "$macaddr" != "" ]; then
		ip link set ${interface} address ${macaddr} || die "Couldn't rename interface"
	fi
	if [ ! -d /proc/sys/net/ipv6 ]; then
		# attempt to silently load ipv6 module
		modprobe -q ipv6
	fi
	if [ "$vlanmode" != "off" ]; then
	       	if [ ! -d /proc/net/vlan ]; then
		       	modprobe -q 8021q
			if [ ! -d /proc/net/vlan ]; then
				eerror "VLAN for interface $interface could not be configured:"
				die " \n802.1q support is not present in this kernel."
			fi
		fi
		require trunk vlan
		ip link add dev ${interface} link ${trunk} type vlan id ${vlan} || die "Couldn't configure VLAN ${vlan} on ${trunk}"
	fi
	ip addr flush dev $interface scope global > /dev/null 2>&1
	netif_pre_up
	debug ip link set $interface up
	if [ -n "$mtu" ]; then
		ip link set $interface mtu $mtu
		if [ -n "$slaves" ]; then
			for slave in ${slaves//netif./}; do
				ip link set $slave mtu $mtu || eend $?
			done
		fi
	fi
	ezroute 4 add; ezroute 6 add; ezresolv add
	ezrule 4 add; ezrule 6 add
	if [ "$multicast" = "yes" ]
	then
		ebegin "Adding multicast route for $interface"	
		route add -net 224.0.0.0 netmask 240.0.0.0 dev $interface
		eend $?
	fi
	netif_post_up
	eend $?
}

stop() {
	ebegin "$STOPD"
	netif_pre_down
	ezrule 6 del; ezrule 4 del
	ezresolv del; ezroute 6 del; ezroute 4 del
	ip link set $interface down
	ip addr flush dev $interface scope global
	netif_post_down
	# VLANS:
	[ "${vlanmode}" != "off" ] && ip link delete ${interface}
	netif_destroy
	eend 0
}

# DOM, IP, NM, SLAVES, MTU, NS1, NS2, GW are deprecated - this is backwards compat. code:
domain=${domain:-$DOM}
if [ -n "$IP" ]; then
	ipaddr=$IP/$NM
fi
netmask=${netmask:-$NM}
slaves=${slaves:-$SLAVES}
mtu=${mtu:-$MTU}
nameservers="${nameservers:-$NS1 $NS2}"
gateway=${gateway:-$GW}
# COMPAT END

get_ipnm_part() {
	echo "${1%%;*}"
}

# if_ipv4 will accept something like 1.2.3.4/24;broadcast=1.2.3.255 and return a non-null string
# if the address appears to be an ipv4 address.

if_ipv4() {
	echo "${1%%/*}" | awk '/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*/ {print $1}'
}

# we encode the broadcast like this: 1.2.3.4/24;broadcast=1.2.3.255;foo=bar;x;y;z
# we call the following function like this:
# 'get_option "$ipnm" broadcast +'
# it will return "1.2.3.255" if defined, and a '+' if not defined.
# 'get_option "1.2.3.4;a;b;c" a false' will return 'true' if "a" is defined as a keyword, and "false" (default value)
# otherwise.

get_option() {
	local full="$1"
	local ipnm="$(get_ipnm_part $full)"
	local oldparts="${full:${#ipnm}}"
	local trim
	while true; do
		[ "${oldparts:$((${#oldparts}-1))}" = ";" ] && oldparts="${oldparts:0:$((${#oldparts}-1))}" && continue
		count=$(($count + 1))
		thispart="${oldparts##*;}"
		varname="${thispart%%=*}"
		if [ "$varname" = "$thispart" ] && [ "$thispart" = "$2" ]; then
			echo "true"
			return
		fi
		if [ "$varname" != "$thispart" ] && [ "$varname" = "$2" ]; then
			echo "${thispart#*=}"
			return
		fi
		[ -z "$thispart" ] && break
		trim=$(( ${#oldparts} - ${#thispart} ))
		oldparts="${oldparts:0:${trim}}"
		[ -z "${oldparts}" ] && break
	done
	# return default (if any)
	echo "$3"
}

start_pre() {
	if [ -n "$ipaddr $ipaddrs" ]; then
		for i in $ipaddr $ipaddrs; do
			if [ "${i##*/}" = "$i" ]; then
				echo
				ewarn "You probably want to add a netmask to the ipaddr $i defined in your configuration."
				ewarn "Example: ipaddr=\"192.168.0.1/24\""
				echo
			fi
		done
	fi
}

ezdns() {
	# This function generates a resolv.conf file, which ezresolv() passes to resolvconf
	[ -n "$domain" ] && echo "domain $domain"
	[ -n "$search" ] && echo "search $search"
	for ns in $nameservers; do
		echo "nameserver $ns"
	done
}

ezresolv() {
	# This function calls resolvconf (openresolv) with the correct resolv.conf passed as a here-file
	if [ "$1" = "add" ]; then
		[ -z "`ezdns`" ] && return
		resolvconf -a $interface << EOF || die "Problem adding DNS info for $interface"
`ezdns`
EOF
	else
		resolvconf -d $interface > /dev/null 2>&1
	fi
}

ezroute() {
	# This function processes a semi-colon delimited list of routes set in $route, and also
	# supports the $gateway variable for setting a default IP route. 
	local rest
	if [ "$1" = "4" ]; then
		rest="$route"
		[ -n "$gateway" ] && rest="$rest; default via $gateway dev $interface"
	elif [ "$1" = "6" ]; then
		rest="$route6"
		[ -n "$gateway6" ] && rest="$rest; default via $gateway6 dev $interface"
	fi
	if [ -n "$rest" ]; then
		# must end in a semi-colon before we start processing:
		rest="$rest;"
		while [ "$rest" != "" ]
		do
			# first = current route command; rest = remainder
			first="${rest%%;*}"
			rest="${rest#*;}"
			# trim any trailing or leading spaces:
			first=${first%% }; first=${first## }
			[ "$first" != "" ] && ip -$1 route $2 $first
			[ "$2" = "add" ] && [ $? -ne 0 ] && die "Couldn't set route: $first"
		done
	fi
}

ezrule() {
	# This function processes a semi-colon delimited list of rules set in $rule
	local rest
	if [ "$1" = "4" ]; then
		rest="$rule"
	elif [ "$1" = "6" ]; then
		rest="$rule6"
	fi
	if [ -n "$rest" ]; then
		# ensure a terminating semi-colon
		rest="$rest;"
		while [ "$rest" != "" ]; do
			first="${rest%%;*}"
			rest="${rest#*;}"
			first=${first%% }; first=${first## }
			[ "$first" != "" ] && ip -$1 rule $2 $first
			[ "$2" = "add" ] && [ $? -ne 0 ] && die "Couldn't set rule: $first"
		done
	fi
}

if [ -z "$trunk" ]; then
	# auto-detect trunk/vlan ID from interface name
	vlanmode="auto"
	vlan="${interface##*.}"
	trunk="${interface%.*}"
	[ "$vlan" = "$interface" ] && vlanmode="off"
else
	# trunk/vlan ID specified by user in config
	vlanmode="custom"
	require vlan
fi

. /etc/netif.d/$template
